# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

  # !!! также по цветам очень важно поглядеть тут https://gist.github.com/XVilka/8346728 !!!
  # там есть тест на цвета консоли

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 0
  #  lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  # dynamic_padding: true

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  # decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 1

  # Scroll to the bottom when new text is written to the terminal.
  #auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
#tabspaces: 8

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    # family: SauceCodePro Nerd Font
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: Hack Nerd Font
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    family: Iosevka Fixed Slab
    # family: Go Mono
    # family: PT Mono
    # family: Fira Mono
    # family: Courier
    # family: Courier New
    # family: Anonymous Pro
    # family: Terminus TTF


    # The `style` can be specified to pick a specific face.
    style: Regular
    # style: Light

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: SauceCodePro Nerd Font
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    family: Iosevka Fixed Slab
    # family: Go Mono
    # family: PT Mono
    # family: Courier
    # family: Courier New
    # family: Anonymous Pro

    # The `style` can be specified to pick a specific face.
    # style: Bold
    style: Medium

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: SauceCodePro Nerd Font Mono
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    family: Iosevka Fixed Slab
    # family: Go Mono
    # family: PT Mono
    # family: Courier
    # family: Courier New
    # family: Anonymous Pro

    # The `style` can be specified to pick a specific face.
    # style: Italic
    style: Light Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: SauceCodePro Nerd Font Mono
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    family: Iosevka Fixed Slab
    # family: Go Mono
    # family: PT Mono
    # family: Courier
    # family: Courier New
    # family: Anonymous Pro

    # The `style` can be specified to pick a specific face.
    # Bold Italic
    style: Medium Italic

  # Point size
  size: 16.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  #use_thin_strokes: true



colors:
  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor.
  #
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  cursor:
    text: "#000000"
    cursor: "#ffff00"
  # Default colors
  primary:
    background: '#000000'
    foreground: '#cccccc'

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
bell:
  animation: EaseOutCirc
  color: "0x660000"
  duration: 300


# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0
# background_opacity: 0.80

#selection:
#semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  thickness: 0.4
  style:
    # Cursor shape
    #
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #n   - | Beam
    shape: Underline

    # Cursor blinking state
    #
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Always


# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:

  - { key: Backslash, mods: Command|Shift, chars: "\x1b|" } # Alt + |
  - { key: Comma,     mods: Command|Shift, chars: "\x1b<" } # Alt + <
  - { key: Grave,     mods: Command|Shift, chars: "\x1b~" } # Alt + ~
  - { key: Key3,      mods: Command|Shift, chars: "\x1b#" } # Alt + #
  - { key: Key5,      mods: Command|Shift, chars: "\x1b%" } # Alt + %
  - { key: Key6,      mods: Command|Shift, chars: "\x1b^" } # Alt + ^
  - { key: Key8,      mods: Command|Shift, chars: "\x1b*" } # Alt + *
  - { key: Minus,     mods: Command|Shift, chars: "\x1b_" } # Alt + _
  - { key: Period,    mods: Command|Shift, chars: "\x1b>" } # Alt + >

  - { key: Grave,     mods: Command,       chars: "\x1b`"  } # Alt + `
  - { key: Comma,     mods: Command,       chars: "\x1b,"  } # Alt + .
  - { key: Period,    mods: Command,       chars: "\x1b."  } # Alt + .
  - { key: Backslash, mods: Command,       chars: "\x1b\\" } # Alt + \

  - { key: A,         mods: Command,       chars: "\x1ba" }
  - { key: B,         mods: Command,       chars: "\x1bb" }
  - { key: C,         mods: Command,       chars: "\x1bc" }
  - { key: D,         mods: Command,       chars: "\x1bd" }
  - { key: E,         mods: Command,       chars: "\x1be" }
  - { key: F,         mods: Command,       chars: "\x1bf" }
  - { key: G,         mods: Command,       chars: "\x1bg" }
  - { key: H,         mods: Command,       chars: "\x1bh" }
  - { key: I,         mods: Command,       chars: "\x1bi" }
  - { key: J,         mods: Command,       chars: "\x1bj" }
  - { key: K,         mods: Command,       chars: "\x1bk" }
  - { key: L,         mods: Command,       chars: "\x1bl" }
  - { key: M,         mods: Command,       chars: "\x1bm" }
  - { key: N,         mods: Command,       chars: "\x1bn" }
  - { key: O,         mods: Command,       chars: "\x1bo" }
  - { key: P,         mods: Command,       chars: "\x1bp" }
  - { key: Q,         mods: Command,       chars: "\x1bq" }
  - { key: R,         mods: Command,       chars: "\x1br" }
  - { key: S,         mods: Command,       chars: "\x1bs" }
  - { key: T,         mods: Command,       chars: "\x1bt" }
  - { key: U,         mods: Command,       chars: "\x1bu" }
  - { key: V,         mods: Command,       chars: "\x1bv" }
  - { key: W,         mods: Command,       chars: "\x1bw" }
  - { key: X,         mods: Command,       chars: "\x1bx" }
  - { key: Y,         mods: Command,       chars: "\x1by" }
  - { key: Z,         mods: Command,       chars: "\x1bz" }
  - { key: A,         mods: Command|Shift, chars: "\x1bA" }
  - { key: B,         mods: Command|Shift, chars: "\x1bB" }
  - { key: C,         mods: Command|Shift, chars: "\x1bC" }
  - { key: D,         mods: Command|Shift, chars: "\x1bD" }
  - { key: E,         mods: Command|Shift, chars: "\x1bE" }
  - { key: F,         mods: Command|Shift, chars: "\x1bF" }
  - { key: G,         mods: Command|Shift, chars: "\x1bG" }
  - { key: H,         mods: Command|Shift, chars: "\x1bH" }
  - { key: I,         mods: Command|Shift, chars: "\x1bI" }
  - { key: J,         mods: Command|Shift, chars: "\x1bJ" }
  - { key: K,         mods: Command|Shift, chars: "\x1bK" }
  - { key: L,         mods: Command|Shift, chars: "\x1bL" }
  - { key: M,         mods: Command|Shift, chars: "\x1bM" }
  - { key: N,         mods: Command|Shift, chars: "\x1bN" }
  - { key: O,         mods: Command|Shift, chars: "\x1bO" }
  - { key: P,         mods: Command|Shift, chars: "\x1bP" }
  - { key: Q,         mods: Command|Shift, chars: "\x1bQ" }
  - { key: R,         mods: Command|Shift, chars: "\x1bR" }
  - { key: S,         mods: Command|Shift, chars: "\x1bS" }
  - { key: T,         mods: Command|Shift, chars: "\x1bT" }
  - { key: U,         mods: Command|Shift, chars: "\x1bU" }
  - { key: V,         mods: Command|Shift, chars: "\x1bV" }
  - { key: W,         mods: Command|Shift, chars: "\x1bW" }
  - { key: X,         mods: Command|Shift, chars: "\x1bX" }
  - { key: Y,         mods: Command|Shift, chars: "\x1bY" }
  - { key: Z,         mods: Command|Shift, chars: "\x1bZ" }
  - { key: Key1,      mods: Command,       chars: "\x1b1" }
  - { key: Key2,      mods: Command,       chars: "\x1b2" }
  - { key: Key3,      mods: Command,       chars: "\x1b3" }
  - { key: Key4,      mods: Command,       chars: "\x1b4" }
  - { key: Key5,      mods: Command,       chars: "\x1b5" }
  - { key: Key6,      mods: Command,       chars: "\x1b6" }
  - { key: Key7,      mods: Command,       chars: "\x1b7" }
  - { key: Key8,      mods: Command,       chars: "\x1b8" }
  - { key: Key9,      mods: Command,       chars: "\x1b9" }
  - { key: Key0,      mods: Command,       chars: "\x1b0" }

  # Copy and Paste
  - { key: C,     mods: Alt,     action: Copy  }
  - { key: V,     mods: Alt,     action: Paste }
  #- { key: C,     mods: Command|Shift, action: Copy  }
  #- { key: V,     mods: Command|Shift, action: Paste }

  # Перемещение по на блок кода вперед
  # запускаем коману showkey
  # нажимаем кобинацию
  # на ctrl-alt-f получаем код <ESC><CTL-F=ACK>
  # здесь <ESC> = \xb1 a ctrl-f=ACK - ищем ео код в гугле как 'ACK char code'
  # и получаем x06
  # значит подставляем "\x1b\x06"
  - { key: B,     mods: Command|Control, chars: "\x1b\x02"}
  - { key: F,     mods: Command|Control, chars: "\x1b\x06"}
  - { key: K,     mods: Command|Control, chars: "\x1b\x0b"}
  - { key: T,     mods: Command|Control, chars: "\x1b\x13"}
  - { key: J,     mods: Command|Control, chars: "\x1b\x0A"}

  # обходное решение по C-q, открыто issue здесь https://github.com/alacritty/alacritty/issues/1359
  - { key: Q, mods: Control, chars: "\x11" }

  # Full screen disable
  - { key: F12,   mods: Alt,             action: "ToggleFullscreen"}

  # Font Size
  - { key: Key0,   mods: Alt, action: ResetFontSize    }
  - { key: Equals, mods: Alt, action: IncreaseFontSize }
  - { key: Minus,  mods: Alt, action: DecreaseFontSize }

  - { key: Semicolon, mods: Control, chars: "\x18\x40\x63\x3b" } # 'Ctrl + ;' - dublicate line
  #- { key: Semicolon, mods: Alt,     chars: "\x1b;"            } # 'Alt + ;'

  - { key: Slash,     mods: Control, chars: "\x1f" } # undo
  - { key: Space,     mods: Command|Control, chars: "\x1b\x00" } # Ctrl + Alt + Space ->> selection...
  - { key: Apostrophe, mods: Control,  chars: "\x18\x40\x63\x27"  } # Ctrl + '' -> ^X @ c '

  # mulibple cursor
  - { key: Backslash, mods: Command, chars: "\x1b\\" } # Selection
  - { key: Minus,     mods: Command, chars: "\x1b-" } # Selection
  - { key: Minus,     mods: Control|Command|Shift, chars: "\x1b\x1f" } # please see here http://defindit.com/ascii.html

  - { key: Return,  mods: Command,  chars: "\x1b\x0d" } # Alt + Return
  # - { key: Return,  mods: Command,  chars: "\x1b\x0a" }

  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Command, chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Command, chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Command, chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Command, chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }

  # Please see good example here:
  # https://git.mfeller.io/rice/file/dots/.config/alacritty/alacritty.yml.html
