# name: om1
# key: om1
# --

(def $1-app-init
  {$0})


(defn $1 [app own {:keys [] :as opts}]
  (reify
    om/IInitState
    (init-state [_]
      {:chan-update (chan)})

    om/IWillMount
    (will-mount [this]
      (let [{:keys [chan-update]} (om/get-state own)]
        (println "OM: $1 -> will-mount")

        (go
          (while true
            (let [_ (<! chan-update)]
              (println "OM: $1 -> chan-update -> run! "))))

        (put! chan-update 1)))

    om/IDidMount
    (did-mount [_]
      (let [{:keys []} (om/get-state own)]
        (println "OM: $1 -> did-mount")))

    om/IWillUnmount
    (will-unmount [_]
      (let [{:keys []} (om/get-state own)]
        (println "OM: $1 -> will-unmount")))

    
    om/IRenderState
    (render-state [_ {:keys [chan-update]}]
      (dom/div
       #js {:className ""}
       "OM: $1"))))
